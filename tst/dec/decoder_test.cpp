#include "asn1/ber/pch.h"
#ifndef  PCH
	#include <string>
    #include <vector>
#endif
#include <asn1/ber/decoder/printer.h>
#include "../tester.h"
//#define CATCH_CONFIG_MAIN
#include <catch2/catch.hpp>

namespace asn1 {
namespace ber {

void decoder_test()
{
	using Buffer = std::vector<byte>;

	const std::vector<Buffer> input =
	{
		{ 0x01, 0x01, 0x01 },
		{ 0x01, 0x01, 0xFF },
		{ 0x31, 0x08, 0x02, 0x01, 0x80, 0x09, 0x03, 0x80, 0xFB, 0x05 },
		{ 0x30, 0x08, 0x02, 0x01, 0x80, 0x09, 0x03, 0x80, 0xFB, 0x05 },
		{ 0x30, 0x13, 0x02, 0x01, 0x05, 0x16, 0x0e, 0x41, 0x6e, 0x79, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x3f },
		{ 0x01, 0x05, 0x0e, 0x83, 0xbb, 0xce, 0x2d, 0xf9, 0x3c, 0xa0, 0xe9, 0xa3, 0x2f, 0x2c, 0xaf, 0xc0 }
    };

    using tester = decoder::tester<>;

    const tester::test_item_array input_items = 
	{
		{ // test1
			{ 0x01, 0x01, 0x01 }, // input

			{ // expected
				{ { tag_t::sequence }, { 0x100, 0, 0} }
			}
		},
		{ // test2
			{ 0x01, 0x01, 0x01 }, // input

			{ // expected
				{ { tag_t::sequence }, { 0x100, 0, 0} }
			}
		},
	};

    tester t(input_items);

    ber::decoder::printer<> printer(std::cout);
	for( auto& i : input)
	{
		printer(i.data(), i.data() + i.size());
		printer.reset();
	}
}

}}

int main()
{
	asn1::ber::decoder_test();
}
